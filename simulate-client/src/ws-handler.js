import { updatePosition } from "./map-handler";
import estimateData from '../static/estimate.json';
import { showNotification } from "./ui-handler";


// const WEB_SOCKET_URL = "wss://honestly-becoming-octopus.ngrok-free.app/localize";
const WEB_SOCKET_URL = "ws://slam:8000/localize";
// let ws = new WebSocket(WEB_SOCKET_URL);
let reconnectInterval = null;

function initWebSocket() {
    // Khi k·∫øt n·ªëi th√†nh c√¥ng
    ws.onopen = () => {
        showNotification("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng");
        if (reconnectInterval) {
            clearInterval(reconnectInterval);
            reconnectInterval = null;
        }
    };

    ws.onmessage = (msg) => {
        console.log("üì• Server response:", msg.data);
        const data = JSON.parse(msg.data);
        const pose = data.pose;
        const id = data.id;
        updatePosition(pose.x, pose.z, pose.yaw, id);
    };

    ws.onclose = () => {
        showNotification("‚ùå K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng");
        reconnectInterval = setInterval(() => {
            showNotification("üîÑ Attempting to reconnect...");
            ws = new WebSocket(WEB_SOCKET_URL);
            initWebSocket(); // Reinitialize the WebSocket connection
        }, 10000); // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
    };

    ws.onerror = (err) => {
        showNotification("‚ùå L·ªói k·∫øt n·ªëi WebSocket: " + err.message);
    };
}

function sendMessage(data) {
    if (ws.readyState === WebSocket.OPEN) {
        // Ki·ªÉm tra n·∫øu data l√† m·ªôt ƒë·ªëi t∆∞·ª£ng Blob (v√≠ d·ª•: ·∫£nh)
        if (data instanceof Blob) {
            // Chuy·ªÉn ƒë·ªïi Blob th√†nh ArrayBuffer
            const reader = new FileReader();
            reader.onload = function (event) {
                const arrayBuffer = event.target.result;
                ws.send(arrayBuffer);
                console.log("üì§ Image sent as ArrayBuffer");
            };
            reader.readAsArrayBuffer(data);
        } else {
            // N·∫øu data kh√¥ng ph·∫£i l√† Blob, g·ª≠i tr·ª±c ti·∫øp
            ws.send(JSON.stringify(data));
            console.log("üì§ Data sent:", data);
        }
    } else {
        console.error("‚ùå WebSocket is not open");
    }
}

function simulateSendMessage(id) {
    let pose = estimateData[id];
    updatePosition(pose.x, pose.z, pose.yaw, id);
}



export { initWebSocket, sendMessage, simulateSendMessage };
